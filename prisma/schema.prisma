generator client {
  provider = "prisma-client-js"
  previewFeatures = ["extendedWhereUnique"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  RENTER
  HOST
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELED
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String     @unique
  password      String?
  emailVerified DateTime?
  image         String?
  role          Role       @default(RENTER)
  accounts      Account[]
  sessions      Session[]
  properties    Property[] 
  bookings      Booking[]  
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  type              String
  provider          String
  providerAccountId String  @unique
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expires      DateTime
}

model Property {
  id          String    @id @default(cuid())
  category    String?
  title       String
  description String?
  price       Float
  location    String
  images      String[]
  amenities   String[]  
  rooms       Int      
  bathrooms   Int      
  hostId      String
  host        User      @relation(fields: [hostId], references: [id])
  bookings    Booking[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Booking {
  id         String        @id @default(cuid())
  checkIn    DateTime
  checkOut   DateTime
  status     BookingStatus @default(PENDING)
  renterId   String
  renter     User         @relation(fields: [renterId], references: [id])
  propertyId String
  property   Property     @relation(fields: [propertyId], references: [id])
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
}